<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.backend.store.StoreMapper">

    <!-- 상점 등록 -->
    <insert id="storeInsert" parameterType="org.example.backend.store.dto.StoreRegistrationVo">
        INSERT INTO StoreRegistration (owner_id, store_name, store_address, store_description, store_image, store_x, store_y, store_ca)
        VALUES (#{owner_id}, #{store_name}, #{store_address}, #{store_description}, #{store_image}, #{store_x}, #{store_y}, #{store_ca})
    </insert>

    <!-- 승인 요청 확인 -->
    <select id="approveR" resultType="int" parameterType="int">
        SELECT store_id FROM StoreRegistration WHERE owner_id = #{id} AND approval_status = 1
        UNION
        SELECT store_id FROM StoreRegistration WHERE owner_id = #{id} AND approval_status = 2
    </select>

    <!-- 메뉴 등록 -->
    <insert id="menuRs" parameterType="org.example.backend.store.dto.StoreInformationVo">
        INSERT INTO StoreInformation (store_id, menu_name, menu_price, menu_image)
        VALUES (#{storeId}, #{menuName}, #{menuPrice}, #{menuImage})
    </insert>

    <!-- 메뉴 목록 조회 -->
    <select id="menuList" resultType="org.example.backend.store.dto.StoreInformationVo" parameterType="int">
        SELECT * FROM StoreInformation WHERE store_id = #{id}
    </select>

    <!-- 메뉴 수정 -->
    <update id="menuedit" parameterType="org.example.backend.store.dto.StoreInformationVo">
        UPDATE StoreInformation SET menu_price = #{menuPrice}, menu_image = #{menuImage}
        WHERE store_id = #{storeId} AND menu_name = #{menuName}
    </update>

    <update id="menuedit2" parameterType="org.example.backend.store.dto.StoreInformationVo">
        UPDATE StoreInformation SET menu_price = #{menuPrice}
        WHERE store_id = #{storeId} AND menu_name = #{menuName}
    </update>

    <!-- 메뉴 삭제 -->
    <delete id="menudel" parameterType="map">
        DELETE FROM StoreInformation WHERE store_id = #{id} AND menu_name = #{name}
    </delete>

    <!-- 주문 조회 -->
    <select id="order" resultType="org.example.backend.store.dto.StoreOrderInformationVo" parameterType="int">
        SELECT o.order_id, o.customer_id, o.store_id, o.order_details, o.total_price, o.user_x, o.user_y, o.order_approval_status,
        u.Email AS email, u.Name AS name
        FROM OrderInformation o
        JOIN UserInformation u ON o.customer_id = u.user_id
        WHERE o.store_id = #{id} AND order_approval_status NOT IN (4, 5, 6)
    </select>

    <!-- 조리 중 상태로 변경 -->
    <update id="cook" parameterType="int">
        UPDATE orderinformation SET order_approval_status = 1 WHERE order_id = #{id}
    </update>

    <!-- 라이더 배정 -->
    <update id="rider" parameterType="int">
        UPDATE orderinformation SET order_approval_status = 2 WHERE order_id = #{id}
    </update>

    <!-- 주문 거절 -->
    <update id="refuse" parameterType="int">
        UPDATE orderinformation SET order_approval_status = 5 WHERE order_id = #{id}
    </update>

    <!-- 결제 내역 조회 -->
    <select id="orderReceipt" resultType="org.example.backend.store.dto.StoreOrderInformationVo" parameterType="int">
        SELECT o.order_id, o.customer_id, o.store_id, o.order_details, o.total_price, o.user_x, o.user_y,
        u.Email AS email, u.Name AS name
        FROM OrderInformation o
        JOIN UserInformation u ON o.customer_id = u.user_id
        WHERE o.store_id = #{storeId} AND o.order_approval_status IN (4, 6)
    </select>

    <!-- 매출 내역 조회 -->
    <select id="orderSalesInfo" resultType="org.example.backend.store.dto.StoreOrderInformationVo" parameterType="int">
        SELECT store_id, order_details, total_price, order_date
        FROM OrderInformation
        WHERE store_id = #{storeId} AND order_approval_status IN (4, 6)
    </select>

    <!-- 업체 정보 조회 -->
    <select id="storeInfo" resultType="org.example.backend.store.dto.StoreRegistrationVo" parameterType="int">
        SELECT * FROM StoreRegistration WHERE owner_id = #{id}
    </select>

    <!-- 업체 이미지 수정 -->
    <update id="storeEditImg" parameterType="org.example.backend.store.dto.StoreRegistrationVo">
        UPDATE StoreRegistration SET store_name = #{store_name}, store_address = #{store_address}, store_description = #{store_description},
        store_image = #{store_image}, store_x = #{store_x}, store_y = #{store_y} WHERE owner_id = #{owner_id}
    </update>

    <!-- 업체 정보 수정 -->
    <update id="storeEdit" parameterType="org.example.backend.store.dto.StoreRegistrationVo">
        UPDATE StoreRegistration SET store_name = #{store_name}, store_address = #{store_address}, store_description = #{store_description},
        store_x = #{store_x}, store_y = #{store_y} WHERE owner_id = #{owner_id}
    </update>

    <!-- 업체 삭제 -->
    <delete id="storeDelete" parameterType="int">
        DELETE FROM StoreRegistration WHERE store_id = #{storeId}
    </delete>

    <!-- 댓글 목록 조회 -->
    <select id="commentList" resultType="org.example.backend.comments.dto.CommentsVo" parameterType="int">
        SELECT comment_id, store_id, author_id, author_name, content, rating, visibility_status, depth, creation_date
        FROM Comments
        WHERE store_id = #{id} AND (
        visibility_status IN (1, 2) OR (
        depth = 1 AND comment_id IN (
        SELECT DISTINCT reply_id FROM Comments WHERE visibility_status IN (1, 2) AND store_id = #{id}
        )
        )
        )
        ORDER BY COALESCE(reply_id, comment_id) DESC,
        CASE WHEN depth = 1 THEN creation_date ELSE (SELECT creation_date FROM Comments WHERE comment_id = Comments.reply_id) END DESC,
        comment_id DESC
    </select>

    <!-- 댓글 신고 -->
    <insert id="report" parameterType="org.example.backend.store.dto.ReportsVo">
        INSERT INTO Reports (comment_id, comment_author_id, reporter_id, report_text)
        VALUES (#{commentId}, #{commentAuthorId}, #{reporterId}, #{reportText})
    </insert>

    <!-- 댓글 상태 변경 -->
    <update id="reportOrder" parameterType="int">
        UPDATE Comments SET visibility_status = 2 WHERE comment_id = #{id}
    </update>

    <!-- 업체 존재 여부 확인 -->
    <select id="exist" resultType="int" parameterType="int">
        SELECT store_id FROM StoreRegistration WHERE owner_id = #{id}
    </select>

    <!-- 주문 내역 조회 (유저 ID와 가격) -->
    <select id="orderUserId" resultType="org.example.backend.store.dto.StoreOrderInformationVo" parameterType="int">
        SELECT * FROM OrderInformation WHERE order_id = #{id}
    </select>

</mapper>
