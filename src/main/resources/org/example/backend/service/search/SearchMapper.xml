<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.backend.service.search.SearchMapper">

    <!-- 음식점 조회 (카테고리별) -->
    <select id="storeList" parameterType="map" resultType="org.example.backend.store.dto.StoreRegistrationVo">
        SELECT * FROM StoreRegistration
        WHERE store_ca = #{num}
          AND approval_status = 1
          AND store_x BETWEEN #{x} - 0.08 AND #{x} + 0.08
          AND store_y BETWEEN #{y} - 0.08 AND #{y} + 0.08
    </select>

    <!-- 특정 가게의 메뉴 목록 조회 -->
    <select id="menuList" parameterType="int" resultType="org.example.backend.store.dto.StoreInformationVo">
        SELECT * FROM StoreInformation WHERE store_id = #{id}
    </select>

    <!-- 주문 등록 -->
    <insert id="order" parameterType="org.example.backend.service.OrderVo">
        INSERT INTO OrderInformation (customer_id, store_id, order_details, total_price, user_x, user_y)
        VALUES (#{customerId}, #{storeId}, #{orderDetails}, #{totalPrice}, #{user_x}, #{user_y})
    </insert>

    <!-- 사용자 이메일 조회 -->
    <select id="email" parameterType="int" resultType="string">
        SELECT Email FROM userinformation WHERE user_id = #{id}
    </select>

    <!-- 주문 내역 조회 -->
    <select id="getUserOrders" parameterType="int" resultType="org.example.backend.service.OrderListVo">
        SELECT oi.order_id, oi.customer_id, oi.store_id, oi.order_details, oi.total_price,
               oi.order_date, sr.store_name, sr.store_image, oi.order_approval_status
        FROM OrderInformation oi
                 INNER JOIN StoreRegistration sr ON oi.store_id = sr.store_id
        WHERE oi.customer_id = #{userId}
        ORDER BY oi.order_id DESC
    </select>

    <!-- 검색창에서 가게 조회 -->
    <select id="storeList2" parameterType="map" resultType="org.example.backend.store.dto.StoreRegistrationVo">
        SELECT * FROM StoreRegistration
        WHERE approval_status = 1
          AND store_name LIKE CONCAT('%', #{word}, '%')
          AND store_x BETWEEN #{x} - 0.08 AND #{x} + 0.08
          AND store_y BETWEEN #{y} - 0.08 AND #{y} + 0.08
    </select>

    <!-- AI 검색 (메뉴명 기반) -->
    <select id="storeList3" parameterType="map" resultType="org.example.backend.store.dto.StoreRegistrationVo">
        SELECT * FROM StoreRegistration s
                          JOIN StoreInformation sf ON sf.store_id = s.store_id
        WHERE sf.visibility_status = 1
          AND sf.menu_name LIKE CONCAT('%', #{word}, '%')
          AND store_x BETWEEN #{x} - 0.08 AND #{x} + 0.08
          AND store_y BETWEEN #{y} - 0.08 AND #{y} + 0.08
    </select>

    <!-- 사용자 리뷰 목록 조회 -->
    <select id="review" parameterType="int" resultType="org.example.backend.comments.dto.CommentsVo">
        SELECT comment_id, store_id, author_id, author_name, content, rating, visibility_status, creation_date, depth
        FROM Comments
        WHERE author_id = #{id}
          AND visibility_status IN (1, 2)
        ORDER BY comment_id DESC
    </select>

</mapper>
